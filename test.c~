#include <linux/netfilter.h>
#include <linux/netfilter_ipv4.h>
#include <linux/module.h>
#include <linux/moduleparam.h>
#include <linux/kernel.h>
#include <linux/inet.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <linux/udp.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <net/checksum.h>
#include <net/tcp.h>
#include <net/ip.h>
#include <linux/skbuff.h>
#include <linux/device.h>

#include "match_rule.h"
#include "ipc.h"
MODULE_LICENSE("GPL");


static struct nf_hook_ops ops_nfhk_li;
static struct nf_hook_ops ops_nfhk_lo;

static unsigned int hook_match_packet_li(
		unsigned int hooknum,
		struct sk_buff *skb,
		const struct net_device *in,
		const struct net_device *ot,
		int (*kfn)(struct sk_buff*))
{
		//printk("receive package\n");
		return NF_ACCEPT;
}

static unsigned int hook_match_packet_lo(
                unsigned int hooknum, 
                struct sk_buff *skb, 
                const struct net_device *in, 
                const struct net_device *ot, 
                int (*okfn)(struct sk_buff*))
{
	//printk("receive package\n");
    return NF_ACCEPT;
}

static int init_matchnf(void)
{
    
 /*   if (netlink_init() != 0)
    {
	printk("netlink init was failed!\n");
    }*/

    ops_nfhk_li.hook    = hook_match_packet_li;
    ops_nfhk_li.owner   = THIS_MODULE,
    ops_nfhk_li.hooknum = NF_INET_LOCAL_IN;
    ops_nfhk_li.pf      = PF_INET;
    ops_nfhk_li.priority= NF_IP_PRI_FIRST;
	
	ops_nfhk_lo.hook	= hook_match_packet_lo;
	ops_nfhk_lo.owner	= THIS_MODULE,
	ops_nfhk_lo.hooknum = NF_INET_LOCAL_OUT;
	ops_nfhk_lo.pf		= PF_INET;
	ops_nfhk_lo.priority= NF_IP_PRI_FIRST;


    if (nf_register_hook(&ops_nfhk_li) != 0)
    {
        printk("register LOCAL_IN hook was failed!\n");
        return -1;
    }
	  if (nf_register_hook(&ops_nfhk_lo) != 0)
    {
        printk("register LOCAL_IN hook was failed!\n");
        return -1;
    }

    printk("Init \n");

    return 0;
}


static void exit_matchnf(void)
{
	nf_unregister_hook(&ops_nfhk_li);
    	//netlink_exit();
	printk("Exit!\n");
}

module_init(init_matchnf);
module_exit(exit_matchnf);
